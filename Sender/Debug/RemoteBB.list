
RemoteBB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800373c  0800373c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800373c  0800373c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800373c  0800373c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08003744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000028  0800376c  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800376c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006972  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cd  00000000  00000000  000269c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00027f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  000286f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016848  00000000  00000000  00028da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000910a  00000000  00000000  0003f5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c40  00000000  00000000  000486fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb33a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea8  00000000  00000000  000cb38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000028 	.word	0x20000028
 800012c:	00000000 	.word	0x00000000
 8000130:	080036dc 	.word	0x080036dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000002c 	.word	0x2000002c
 800014c:	080036dc 	.word	0x080036dc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2uiz>:
 80009fc:	004a      	lsls	r2, r1, #1
 80009fe:	d211      	bcs.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d211      	bcs.n	8000a2a <__aeabi_d2uiz+0x2e>
 8000a06:	d50d      	bpl.n	8000a24 <__aeabi_d2uiz+0x28>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d40e      	bmi.n	8000a30 <__aeabi_d2uiz+0x34>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	4770      	bx	lr
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_d2uiz+0x3a>
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	4770      	bx	lr

08000a3c <SPI_ReadWriteByte>:

const uint8_t TX_ADDRESS[TX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //发送地址
const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //接受地址

uint8_t SPI_ReadWriteByte(uint8_t TxData)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	uint8_t Rxdata;
    HAL_SPI_TransmitReceive(hspi , &TxData, &Rxdata, 1, 1000);
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <SPI_ReadWriteByte+0x2c>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f107 020f 	add.w	r2, r7, #15
 8000a4e:	1df9      	adds	r1, r7, #7
 8000a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	2301      	movs	r3, #1
 8000a58:	f002 fbcc 	bl	80031f4 <HAL_SPI_TransmitReceive>
 	return Rxdata;          		    //返回收到的数据
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000044 	.word	0x20000044

08000a6c <NRF24L01_SPI_Init>:


//针对NRF24L01修改SPI驱动
void NRF24L01_SPI_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
    __HAL_SPI_DISABLE(hspi);                        // 先关闭 SPI
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <NRF24L01_SPI_Init+0x4c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <NRF24L01_SPI_Init+0x4c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a82:	601a      	str	r2, [r3, #0]
    hspi -> Init.CLKPolarity  =  SPI_POLARITY_LOW;    // 串行同步时钟的空闲状态为低电平
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <NRF24L01_SPI_Init+0x4c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
    hspi -> Init.CLKPhase     =  SPI_PHASE_1EDGE;     // 串行同步时钟的第1个跳变沿（上升或下降）数据被采样
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <NRF24L01_SPI_Init+0x4c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
    HAL_SPI_Init(hspi);								//
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <NRF24L01_SPI_Init+0x4c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f002 fb27 	bl	80030ec <HAL_SPI_Init>
    __HAL_SPI_ENABLE(hspi);                         // 使能SPI
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <NRF24L01_SPI_Init+0x4c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <NRF24L01_SPI_Init+0x4c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ab0:	601a      	str	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000044 	.word	0x20000044

08000abc <NRF24L01_Init>:

//初始化24L01的IO口
void NRF24L01_Init(SPI_HandleTypeDef* hspi)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_Initure;
    __HAL_RCC_GPIOB_CLK_ENABLE();			//开启GPIOB时钟
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <NRF24L01_Init+0x60>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a14      	ldr	r2, [pc, #80]	; (8000b1c <NRF24L01_Init+0x60>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <NRF24L01_Init+0x60>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0308 	and.w	r3, r3, #8
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
//    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
//    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
//    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化

	//GPIOB7,8推挽输出
    GPIO_Initure.Pin = GPIO_PIN_7|GPIO_PIN_8;	//PB7，8
 8000adc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ae0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <NRF24L01_Init+0x64>)
 8000aea:	f001 fbe7 	bl	80022bc <HAL_GPIO_Init>

	//GPIOG6上拉输入
	GPIO_Initure.Pin  = GPIO_PIN_6;			//PG6
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Mode = GPIO_MODE_INPUT;      //输入
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4619      	mov	r1, r3
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <NRF24L01_Init+0x64>)
 8000afe:	f001 fbdd 	bl	80022bc <HAL_GPIO_Init>

//	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);//PB12输出1,防止SPI FLASH干扰NRF的通信

    NRF24L01_SPI_Init();                    //针对NRF的特点修改SPI的设置
 8000b02:	f7ff ffb3 	bl	8000a6c <NRF24L01_SPI_Init>
	NRF24L01_CE  = 0; 			                //使能24L01
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <NRF24L01_Init+0x68>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
	NRF24L01_CSN = 1;			                //SPI片选取消
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <NRF24L01_Init+0x6c>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	422181a0 	.word	0x422181a0
 8000b28:	4221819c 	.word	0x4221819c

08000b2c <NRF24L01_Write_Reg>:
}
//SPI写寄存器
//reg:指定寄存器地址
//value:写入的值
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	460a      	mov	r2, r1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
   	NRF24L01_CSN=0;                 //使能SPI传输
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <NRF24L01_Write_Reg+0x3c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
  	status = SPI_ReadWriteByte(reg);//发送寄存器号
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff79 	bl	8000a3c <SPI_ReadWriteByte>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	73fb      	strb	r3, [r7, #15]
  	SPI_ReadWriteByte(value);      //写入寄存器的值
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff73 	bl	8000a3c <SPI_ReadWriteByte>
  	NRF24L01_CSN=1;                 //禁止SPI传输
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <NRF24L01_Write_Reg+0x3c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
  	return(status);       		    //返回状态值
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	4221819c 	.word	0x4221819c

08000b6c <NRF24L01_Read_Reg>:
//读取SPI寄存器值
//reg:要读的寄存器
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
	 uint8_t reg_val;
   	NRF24L01_CSN=0;             //使能SPI传输
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <NRF24L01_Read_Reg+0x34>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
  	SPI_ReadWriteByte(reg);    //发送寄存器号
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff5c 	bl	8000a3c <SPI_ReadWriteByte>
  	reg_val=SPI_ReadWriteByte(0XFF);//读取寄存器内容
 8000b84:	20ff      	movs	r0, #255	; 0xff
 8000b86:	f7ff ff59 	bl	8000a3c <SPI_ReadWriteByte>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	73fb      	strb	r3, [r7, #15]
  	NRF24L01_CSN=1;             //禁止SPI传输
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <NRF24L01_Read_Reg+0x34>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
  	return(reg_val);            //返回状态值
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	4221819c 	.word	0x4221819c

08000ba4 <NRF24L01_Write_Buf>:
//reg:寄存器(位置)
//*pBuf:数据指针
//len:数据长度
//返回值,此次读到的状态寄存器值
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	71bb      	strb	r3, [r7, #6]
	uint8_t status, u8_ctr;
	NRF24L01_CSN = 0;             //使能SPI传输
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <NRF24L01_Write_Buf+0x54>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
  	status = SPI_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff3d 	bl	8000a3c <SPI_ReadWriteByte>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	73bb      	strb	r3, [r7, #14]
  	for(u8_ctr = 0 ; u8_ctr < len ; u8_ctr++ )SPI_ReadWriteByte(*pBuf++); //写入数据
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]
 8000bca:	e009      	b.n	8000be0 <NRF24L01_Write_Buf+0x3c>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	603a      	str	r2, [r7, #0]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff31 	bl	8000a3c <SPI_ReadWriteByte>
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	79bb      	ldrb	r3, [r7, #6]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d3f1      	bcc.n	8000bcc <NRF24L01_Write_Buf+0x28>
  	NRF24L01_CSN = 1;             //关闭SPI传输
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <NRF24L01_Write_Buf+0x54>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
  	return status;              //返回读到的状态值
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	4221819c 	.word	0x4221819c

08000bfc <NRF24L01_TxPacket>:
//启动NRF24L01发送一次数据
//txbuf:待发送数据首地址
//返回值:发送完成状况
uint8_t NRF24L01_TxPacket(uint8_t *txbuf)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	NRF24L01_CE=0;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <NRF24L01_TxPacket+0x6c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
  	NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	20a0      	movs	r0, #160	; 0xa0
 8000c10:	f7ff ffc8 	bl	8000ba4 <NRF24L01_Write_Buf>
 	NRF24L01_CE=1;                         //启动发送
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <NRF24L01_TxPacket+0x6c>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
	while(NRF24L01_IRQ!=0);                 //等待发送完成
 8000c1a:	bf00      	nop
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <NRF24L01_TxPacket+0x70>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1fb      	bne.n	8000c1c <NRF24L01_TxPacket+0x20>
	sta = NRF24L01_Read_Reg(STATUS);          //读取状态寄存器的值
 8000c24:	2007      	movs	r0, #7
 8000c26:	f7ff ffa1 	bl	8000b6c <NRF24L01_Read_Reg>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2027      	movs	r0, #39	; 0x27
 8000c34:	f7ff ff7a 	bl	8000b2c <NRF24L01_Write_Reg>
	if(sta&MAX_TX)                          //达到最大重发次数
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <NRF24L01_TxPacket+0x52>
	{
		NRF24L01_Write_Reg(FLUSH_TX,0xff);  //清除TX FIFO寄存器
 8000c42:	21ff      	movs	r1, #255	; 0xff
 8000c44:	20e1      	movs	r0, #225	; 0xe1
 8000c46:	f7ff ff71 	bl	8000b2c <NRF24L01_Write_Reg>
		return MAX_TX;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	e007      	b.n	8000c5e <NRF24L01_TxPacket+0x62>
	}
	if(sta&TX_OK)                           //发送完成
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	f003 0320 	and.w	r3, r3, #32
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <NRF24L01_TxPacket+0x60>
	{
		return TX_OK;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	e000      	b.n	8000c5e <NRF24L01_TxPacket+0x62>
	}
	return 0xff;//其他原因发送失败
 8000c5c:	23ff      	movs	r3, #255	; 0xff
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	422181a0 	.word	0x422181a0
 8000c6c:	42218118 	.word	0x42218118

08000c70 <NRF24L01_TX_Mode>:
//设置TX地址,写TX数据宽度,设置RX自动应答的地址,填充TX发送数据,选择RF频道,波特率和LNA HCURR
//PWR_UP,CRC使能
//当CE变高后,即进入RX模式,并可以接收数据了
//CE为高大于10us,则启动发送.
void NRF24L01_TX_Mode(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	NRF24L01_CE = 0;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <NRF24L01_TX_Mode+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址
 8000c7a:	2205      	movs	r2, #5
 8000c7c:	4913      	ldr	r1, [pc, #76]	; (8000ccc <NRF24L01_TX_Mode+0x5c>)
 8000c7e:	2030      	movs	r0, #48	; 0x30
 8000c80:	f7ff ff90 	bl	8000ba4 <NRF24L01_Write_Buf>
	NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK
 8000c84:	2205      	movs	r2, #5
 8000c86:	4912      	ldr	r1, [pc, #72]	; (8000cd0 <NRF24L01_TX_Mode+0x60>)
 8000c88:	202a      	movs	r0, #42	; 0x2a
 8000c8a:	f7ff ff8b 	bl	8000ba4 <NRF24L01_Write_Buf>

	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2021      	movs	r0, #33	; 0x21
 8000c92:	f7ff ff4b 	bl	8000b2c <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址
 8000c96:	2101      	movs	r1, #1
 8000c98:	2022      	movs	r0, #34	; 0x22
 8000c9a:	f7ff ff47 	bl	8000b2c <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
 8000c9e:	211a      	movs	r1, #26
 8000ca0:	2024      	movs	r0, #36	; 0x24
 8000ca2:	f7ff ff43 	bl	8000b2c <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40
 8000ca6:	2128      	movs	r1, #40	; 0x28
 8000ca8:	2025      	movs	r0, #37	; 0x25
 8000caa:	f7ff ff3f 	bl	8000b2c <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8000cae:	210f      	movs	r1, #15
 8000cb0:	2026      	movs	r0, #38	; 0x26
 8000cb2:	f7ff ff3b 	bl	8000b2c <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8000cb6:	210e      	movs	r1, #14
 8000cb8:	2020      	movs	r0, #32
 8000cba:	f7ff ff37 	bl	8000b2c <NRF24L01_Write_Reg>
	NRF24L01_CE = 1;//CE为高,10us后启动发送
 8000cbe:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <NRF24L01_TX_Mode+0x58>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	422181a0 	.word	0x422181a0
 8000ccc:	08003714 	.word	0x08003714
 8000cd0:	0800371c 	.word	0x0800371c

08000cd4 <getADCValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint16_t getADCValue(uint32_t channel)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	 ADC_ChannelConfTypeDef ADC_ChanConf;

	 ADC_ChanConf.Channel      = channel;                      //通道
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
	 ADC_ChanConf.Rank         = ADC_REGULAR_RANK_1;           //第1个序列，序列1
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
	 ADC_ChanConf.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;      //采样时间
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
	 if (HAL_ADC_ConfigChannel(&hadc1, &ADC_ChanConf) != HAL_OK)
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <getADCValue+0x4c>)
 8000cf0:	f001 f86c 	bl	8001dcc <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <getADCValue+0x2a>
	 {
	    Error_Handler();
 8000cfa:	f000 fc27 	bl	800154c <Error_Handler>
	 }
	 HAL_ADC_Start(&hadc1);                                 //开启ADC
 8000cfe:	4808      	ldr	r0, [pc, #32]	; (8000d20 <getADCValue+0x4c>)
 8000d00:	f000 fea4 	bl	8001a4c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1,10);                  //轮询转换
 8000d04:	210a      	movs	r1, #10
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <getADCValue+0x4c>)
 8000d08:	f000 ff4e 	bl	8001ba8 <HAL_ADC_PollForConversion>
	 return (uint16_t)HAL_ADC_GetValue(&hadc1);	        	//返回最近一次ADC1规则组的转换结果
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <getADCValue+0x4c>)
 8000d0e:	f001 f851 	bl	8001db4 <HAL_ADC_GetValue>
 8000d12:	4603      	mov	r3, r0
 8000d14:	b29b      	uxth	r3, r3
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000048 	.word	0x20000048

08000d24 <Get_Adc_Average>:

uint16_t Get_Adc_Average(uint32_t channel, uint8_t times)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	uint32_t temp_val = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
	uint8_t t;
	for(t = 0; t < times; t++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	72fb      	strb	r3, [r7, #11]
 8000d38:	e00d      	b.n	8000d56 <Get_Adc_Average+0x32>
	{
		temp_val += getADCValue(channel);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffca 	bl	8000cd4 <getADCValue>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
		HAL_Delay(5);
 8000d4a:	2005      	movs	r0, #5
 8000d4c:	f000 fd82 	bl	8001854 <HAL_Delay>
	for(t = 0; t < times; t++)
 8000d50:	7afb      	ldrb	r3, [r7, #11]
 8000d52:	3301      	adds	r3, #1
 8000d54:	72fb      	strb	r3, [r7, #11]
 8000d56:	7afa      	ldrb	r2, [r7, #11]
 8000d58:	78fb      	ldrb	r3, [r7, #3]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3ed      	bcc.n	8000d3a <Get_Adc_Average+0x16>
	}
	return temp_val / times;
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	b29b      	uxth	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <pubMessage>:
float k4      = 0.0193359;   // (20 + x)/6206.06
float k5      = 0.0225586;   // (20 + x)/6206.06
float k6      = 0.0273926;   // (20 + x)/6206.06

void pubMessage()
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
	uint8_t cells     = 6;
 8000d76:	2306      	movs	r3, #6
 8000d78:	75fb      	strb	r3, [r7, #23]
	double  total_vol = 0.0;
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	msg[0] = 0x07;
 8000d86:	4bb2      	ldr	r3, [pc, #712]	; (8001050 <pubMessage+0x2e0>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	701a      	strb	r2, [r3, #0]
	msg[1] = 0x09;
 8000d8c:	4bb0      	ldr	r3, [pc, #704]	; (8001050 <pubMessage+0x2e0>)
 8000d8e:	2209      	movs	r2, #9
 8000d90:	705a      	strb	r2, [r3, #1]
	voltages[0] = Get_Adc_Average(ADC_CHANNEL_1, 20);
 8000d92:	2114      	movs	r1, #20
 8000d94:	2001      	movs	r0, #1
 8000d96:	f7ff ffc5 	bl	8000d24 <Get_Adc_Average>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fb19 	bl	80003d4 <__aeabi_ui2d>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	49ab      	ldr	r1, [pc, #684]	; (8001054 <pubMessage+0x2e4>)
 8000da8:	e9c1 2300 	strd	r2, r3, [r1]
	voltages[1] = Get_Adc_Average(ADC_CHANNEL_2, 20);
 8000dac:	2114      	movs	r1, #20
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff ffb8 	bl	8000d24 <Get_Adc_Average>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb0c 	bl	80003d4 <__aeabi_ui2d>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	49a4      	ldr	r1, [pc, #656]	; (8001054 <pubMessage+0x2e4>)
 8000dc2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	voltages[2] = Get_Adc_Average(ADC_CHANNEL_3, 20);
 8000dc6:	2114      	movs	r1, #20
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f7ff ffab 	bl	8000d24 <Get_Adc_Average>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff faff 	bl	80003d4 <__aeabi_ui2d>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	499e      	ldr	r1, [pc, #632]	; (8001054 <pubMessage+0x2e4>)
 8000ddc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	voltages[3] = Get_Adc_Average(ADC_CHANNEL_4, 20);
 8000de0:	2114      	movs	r1, #20
 8000de2:	2004      	movs	r0, #4
 8000de4:	f7ff ff9e 	bl	8000d24 <Get_Adc_Average>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff faf2 	bl	80003d4 <__aeabi_ui2d>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4997      	ldr	r1, [pc, #604]	; (8001054 <pubMessage+0x2e4>)
 8000df6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	voltages[4] = Get_Adc_Average(ADC_CHANNEL_5, 20);
 8000dfa:	2114      	movs	r1, #20
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f7ff ff91 	bl	8000d24 <Get_Adc_Average>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fae5 	bl	80003d4 <__aeabi_ui2d>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4991      	ldr	r1, [pc, #580]	; (8001054 <pubMessage+0x2e4>)
 8000e10:	e9c1 2308 	strd	r2, r3, [r1, #32]
	voltages[5] = Get_Adc_Average(ADC_CHANNEL_6, 20);
 8000e14:	2114      	movs	r1, #20
 8000e16:	2006      	movs	r0, #6
 8000e18:	f7ff ff84 	bl	8000d24 <Get_Adc_Average>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fad8 	bl	80003d4 <__aeabi_ui2d>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	498a      	ldr	r1, [pc, #552]	; (8001054 <pubMessage+0x2e4>)
 8000e2a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	voltages[0] = voltages[0] * k1 + v_ad;
 8000e2e:	4b89      	ldr	r3, [pc, #548]	; (8001054 <pubMessage+0x2e4>)
 8000e30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000e34:	4b88      	ldr	r3, [pc, #544]	; (8001058 <pubMessage+0x2e8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff faed 	bl	8000418 <__aeabi_f2d>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4620      	mov	r0, r4
 8000e44:	4629      	mov	r1, r5
 8000e46:	f7ff fb3f 	bl	80004c8 <__aeabi_dmul>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4614      	mov	r4, r2
 8000e50:	461d      	mov	r5, r3
 8000e52:	4b82      	ldr	r3, [pc, #520]	; (800105c <pubMessage+0x2ec>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fade 	bl	8000418 <__aeabi_f2d>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4620      	mov	r0, r4
 8000e62:	4629      	mov	r1, r5
 8000e64:	f7ff f97a 	bl	800015c <__adddf3>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4979      	ldr	r1, [pc, #484]	; (8001054 <pubMessage+0x2e4>)
 8000e6e:	e9c1 2300 	strd	r2, r3, [r1]
	voltages[1] = voltages[1] * k2 + v_ad;
 8000e72:	4b78      	ldr	r3, [pc, #480]	; (8001054 <pubMessage+0x2e4>)
 8000e74:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000e78:	4b79      	ldr	r3, [pc, #484]	; (8001060 <pubMessage+0x2f0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff facb 	bl	8000418 <__aeabi_f2d>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4620      	mov	r0, r4
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f7ff fb1d 	bl	80004c8 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4614      	mov	r4, r2
 8000e94:	461d      	mov	r5, r3
 8000e96:	4b71      	ldr	r3, [pc, #452]	; (800105c <pubMessage+0x2ec>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fabc 	bl	8000418 <__aeabi_f2d>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f7ff f958 	bl	800015c <__adddf3>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4968      	ldr	r1, [pc, #416]	; (8001054 <pubMessage+0x2e4>)
 8000eb2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	voltages[2] = voltages[2] * k3 + v_ad;
 8000eb6:	4b67      	ldr	r3, [pc, #412]	; (8001054 <pubMessage+0x2e4>)
 8000eb8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000ebc:	4b69      	ldr	r3, [pc, #420]	; (8001064 <pubMessage+0x2f4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff faa9 	bl	8000418 <__aeabi_f2d>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4620      	mov	r0, r4
 8000ecc:	4629      	mov	r1, r5
 8000ece:	f7ff fafb 	bl	80004c8 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4614      	mov	r4, r2
 8000ed8:	461d      	mov	r5, r3
 8000eda:	4b60      	ldr	r3, [pc, #384]	; (800105c <pubMessage+0x2ec>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fa9a 	bl	8000418 <__aeabi_f2d>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4620      	mov	r0, r4
 8000eea:	4629      	mov	r1, r5
 8000eec:	f7ff f936 	bl	800015c <__adddf3>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4957      	ldr	r1, [pc, #348]	; (8001054 <pubMessage+0x2e4>)
 8000ef6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	voltages[3] = voltages[3] * k4 + v_ad;
 8000efa:	4b56      	ldr	r3, [pc, #344]	; (8001054 <pubMessage+0x2e4>)
 8000efc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8000f00:	4b59      	ldr	r3, [pc, #356]	; (8001068 <pubMessage+0x2f8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fa87 	bl	8000418 <__aeabi_f2d>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4620      	mov	r0, r4
 8000f10:	4629      	mov	r1, r5
 8000f12:	f7ff fad9 	bl	80004c8 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	4b4f      	ldr	r3, [pc, #316]	; (800105c <pubMessage+0x2ec>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa78 	bl	8000418 <__aeabi_f2d>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	4629      	mov	r1, r5
 8000f30:	f7ff f914 	bl	800015c <__adddf3>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4946      	ldr	r1, [pc, #280]	; (8001054 <pubMessage+0x2e4>)
 8000f3a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	voltages[4] = voltages[4] * k5 + v_ad;
 8000f3e:	4b45      	ldr	r3, [pc, #276]	; (8001054 <pubMessage+0x2e4>)
 8000f40:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8000f44:	4b49      	ldr	r3, [pc, #292]	; (800106c <pubMessage+0x2fc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa65 	bl	8000418 <__aeabi_f2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4620      	mov	r0, r4
 8000f54:	4629      	mov	r1, r5
 8000f56:	f7ff fab7 	bl	80004c8 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4614      	mov	r4, r2
 8000f60:	461d      	mov	r5, r3
 8000f62:	4b3e      	ldr	r3, [pc, #248]	; (800105c <pubMessage+0x2ec>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fa56 	bl	8000418 <__aeabi_f2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4620      	mov	r0, r4
 8000f72:	4629      	mov	r1, r5
 8000f74:	f7ff f8f2 	bl	800015c <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <pubMessage+0x2e4>)
 8000f7e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	voltages[5] = voltages[5] * k6 + v_ad;
 8000f82:	4b34      	ldr	r3, [pc, #208]	; (8001054 <pubMessage+0x2e4>)
 8000f84:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8000f88:	4b39      	ldr	r3, [pc, #228]	; (8001070 <pubMessage+0x300>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa43 	bl	8000418 <__aeabi_f2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	f7ff fa95 	bl	80004c8 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4614      	mov	r4, r2
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <pubMessage+0x2ec>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fa34 	bl	8000418 <__aeabi_f2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f7ff f8d0 	bl	800015c <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4924      	ldr	r1, [pc, #144]	; (8001054 <pubMessage+0x2e4>)
 8000fc2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if(voltages[5] < 3.0){ cells = 5;}
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <pubMessage+0x2e4>)
 8000fc8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <pubMessage+0x304>)
 8000fd2:	f7ff fceb 	bl	80009ac <__aeabi_dcmplt>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <pubMessage+0x270>
 8000fdc:	2305      	movs	r3, #5
 8000fde:	75fb      	strb	r3, [r7, #23]
	if(voltages[4] < 3.0){ cells = 4;}
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <pubMessage+0x2e4>)
 8000fe2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <pubMessage+0x304>)
 8000fec:	f7ff fcde 	bl	80009ac <__aeabi_dcmplt>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <pubMessage+0x28a>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	75fb      	strb	r3, [r7, #23]
	if(voltages[3] < 3.0){ cells = 3;}
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <pubMessage+0x2e4>)
 8000ffc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <pubMessage+0x304>)
 8001006:	f7ff fcd1 	bl	80009ac <__aeabi_dcmplt>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <pubMessage+0x2a4>
 8001010:	2303      	movs	r3, #3
 8001012:	75fb      	strb	r3, [r7, #23]
	if(voltages[2] < 3.0){ cells = 2;}
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <pubMessage+0x2e4>)
 8001016:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <pubMessage+0x304>)
 8001020:	f7ff fcc4 	bl	80009ac <__aeabi_dcmplt>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <pubMessage+0x2be>
 800102a:	2302      	movs	r3, #2
 800102c:	75fb      	strb	r3, [r7, #23]
	if(voltages[1] < 3.0){ cells = 1;}
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <pubMessage+0x2e4>)
 8001030:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <pubMessage+0x304>)
 800103a:	f7ff fcb7 	bl	80009ac <__aeabi_dcmplt>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <pubMessage+0x2d8>
 8001044:	2301      	movs	r3, #1
 8001046:	75fb      	strb	r3, [r7, #23]

	for( uint8_t i = 0 ; i < cells ; i++){
 8001048:	2300      	movs	r3, #0
 800104a:	71fb      	strb	r3, [r7, #7]
 800104c:	e025      	b.n	800109a <pubMessage+0x32a>
 800104e:	bf00      	nop
 8001050:	20000108 	.word	0x20000108
 8001054:	200000d0 	.word	0x200000d0
 8001058:	20000004 	.word	0x20000004
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000010 	.word	0x20000010
 800106c:	20000014 	.word	0x20000014
 8001070:	20000018 	.word	0x20000018
 8001074:	40080000 	.word	0x40080000
		total_vol += voltages[i];
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4a7b      	ldr	r2, [pc, #492]	; (8001268 <pubMessage+0x4f8>)
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001088:	f7ff f868 	bl	800015c <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for( uint8_t i = 0 ; i < cells ; i++){
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3301      	adds	r3, #1
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	79fa      	ldrb	r2, [r7, #7]
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3ea      	bcc.n	8001078 <pubMessage+0x308>
	}

	msg[2] = cells;
 80010a2:	4a72      	ldr	r2, [pc, #456]	; (800126c <pubMessage+0x4fc>)
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	7093      	strb	r3, [r2, #2]
	msg[3] = (uint8_t)( (voltages[0] - 3.0) * 100 );
 80010a8:	4b6f      	ldr	r3, [pc, #444]	; (8001268 <pubMessage+0x4f8>)
 80010aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <pubMessage+0x500>)
 80010b4:	f7ff f850 	bl	8000158 <__aeabi_dsub>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <pubMessage+0x504>)
 80010c6:	f7ff f9ff 	bl	80004c8 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fc93 	bl	80009fc <__aeabi_d2uiz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4b64      	ldr	r3, [pc, #400]	; (800126c <pubMessage+0x4fc>)
 80010dc:	70da      	strb	r2, [r3, #3]
	msg[4] = (uint8_t)( (voltages[1] - 3.0) * 100 );
 80010de:	4b62      	ldr	r3, [pc, #392]	; (8001268 <pubMessage+0x4f8>)
 80010e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b61      	ldr	r3, [pc, #388]	; (8001270 <pubMessage+0x500>)
 80010ea:	f7ff f835 	bl	8000158 <__aeabi_dsub>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <pubMessage+0x504>)
 80010fc:	f7ff f9e4 	bl	80004c8 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fc78 	bl	80009fc <__aeabi_d2uiz>
 800110c:	4603      	mov	r3, r0
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <pubMessage+0x4fc>)
 8001112:	711a      	strb	r2, [r3, #4]
	msg[5] = (uint8_t)( (voltages[2] - 3.0) * 100 );
 8001114:	4b54      	ldr	r3, [pc, #336]	; (8001268 <pubMessage+0x4f8>)
 8001116:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b54      	ldr	r3, [pc, #336]	; (8001270 <pubMessage+0x500>)
 8001120:	f7ff f81a 	bl	8000158 <__aeabi_dsub>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	4b50      	ldr	r3, [pc, #320]	; (8001274 <pubMessage+0x504>)
 8001132:	f7ff f9c9 	bl	80004c8 <__aeabi_dmul>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fc5d 	bl	80009fc <__aeabi_d2uiz>
 8001142:	4603      	mov	r3, r0
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b49      	ldr	r3, [pc, #292]	; (800126c <pubMessage+0x4fc>)
 8001148:	715a      	strb	r2, [r3, #5]
	msg[6] = (uint8_t)( (voltages[3] - 3.0) * 100 );
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <pubMessage+0x4f8>)
 800114c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <pubMessage+0x500>)
 8001156:	f7fe ffff 	bl	8000158 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b43      	ldr	r3, [pc, #268]	; (8001274 <pubMessage+0x504>)
 8001168:	f7ff f9ae 	bl	80004c8 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fc42 	bl	80009fc <__aeabi_d2uiz>
 8001178:	4603      	mov	r3, r0
 800117a:	b2da      	uxtb	r2, r3
 800117c:	4b3b      	ldr	r3, [pc, #236]	; (800126c <pubMessage+0x4fc>)
 800117e:	719a      	strb	r2, [r3, #6]
	msg[7] = (uint8_t)( (voltages[4] - 3.0) * 100 );
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <pubMessage+0x4f8>)
 8001182:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <pubMessage+0x500>)
 800118c:	f7fe ffe4 	bl	8000158 <__aeabi_dsub>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <pubMessage+0x504>)
 800119e:	f7ff f993 	bl	80004c8 <__aeabi_dmul>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc27 	bl	80009fc <__aeabi_d2uiz>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <pubMessage+0x4fc>)
 80011b4:	71da      	strb	r2, [r3, #7]
	msg[8] = (uint8_t)( (voltages[5] - 3.0) * 100 );
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <pubMessage+0x4f8>)
 80011b8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <pubMessage+0x500>)
 80011c2:	f7fe ffc9 	bl	8000158 <__aeabi_dsub>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <pubMessage+0x504>)
 80011d4:	f7ff f978 	bl	80004c8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff fc0c 	bl	80009fc <__aeabi_d2uiz>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	4b20      	ldr	r3, [pc, #128]	; (800126c <pubMessage+0x4fc>)
 80011ea:	721a      	strb	r2, [r3, #8]

	total_vol *= 100;
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <pubMessage+0x504>)
 80011f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f6:	f7ff f967 	bl	80004c8 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	msg[9]  = (uint8_t)(total_vol / 255);
 8001202:	a317      	add	r3, pc, #92	; (adr r3, 8001260 <pubMessage+0x4f0>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800120c:	f7ff fa86 	bl	800071c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fbf0 	bl	80009fc <__aeabi_d2uiz>
 800121c:	4603      	mov	r3, r0
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <pubMessage+0x4fc>)
 8001222:	725a      	strb	r2, [r3, #9]
	msg[10] = (uint8_t)(total_vol) % 255;
 8001224:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001228:	f7ff fbe8 	bl	80009fc <__aeabi_d2uiz>
 800122c:	4603      	mov	r3, r0
 800122e:	b2da      	uxtb	r2, r3
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <pubMessage+0x508>)
 8001232:	fba3 1302 	umull	r1, r3, r3, r2
 8001236:	09d9      	lsrs	r1, r3, #7
 8001238:	460b      	mov	r3, r1
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	1a5b      	subs	r3, r3, r1
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <pubMessage+0x4fc>)
 8001244:	729a      	strb	r2, [r3, #10]

	if(NRF24L01_TxPacket(msg) != TX_OK){
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <pubMessage+0x4fc>)
 8001248:	f7ff fcd8 	bl	8000bfc <NRF24L01_TxPacket>
 800124c:	4603      	mov	r3, r0
 800124e:	2b20      	cmp	r3, #32
 8001250:	d002      	beq.n	8001258 <pubMessage+0x4e8>
		NRF24L01_TxPacket(msg); //发两次
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <pubMessage+0x4fc>)
 8001254:	f7ff fcd2 	bl	8000bfc <NRF24L01_TxPacket>
	}
}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	00000000 	.word	0x00000000
 8001264:	406fe000 	.word	0x406fe000
 8001268:	200000d0 	.word	0x200000d0
 800126c:	20000108 	.word	0x20000108
 8001270:	40080000 	.word	0x40080000
 8001274:	40590000 	.word	0x40590000
 8001278:	80808081 	.word	0x80808081

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f000 fa86 	bl	8001790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f824 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f000 f8f2 	bl	8001470 <MX_GPIO_Init>
  MX_ADC1_Init();
 800128c:	f000 f87c 	bl	8001388 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001290:	f000 f8b8 	bl	8001404 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24L01_Init(&hspi1);
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <main+0x48>)
 8001296:	f7ff fc11 	bl	8000abc <NRF24L01_Init>
  NRF24L01_TX_Mode();
 800129a:	f7ff fce9 	bl	8000c70 <NRF24L01_TX_Mode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(UserLED2_GPIO_Port, UserLED2_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <main+0x4c>)
 80012a6:	f001 f98d 	bl	80025c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UserLED_GPIO_Port, UserLED_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b0:	4806      	ldr	r0, [pc, #24]	; (80012cc <main+0x50>)
 80012b2:	f001 f987 	bl	80025c4 <HAL_GPIO_WritePin>
	pubMessage();
 80012b6:	f7ff fd5b 	bl	8000d70 <pubMessage>
	HAL_Delay(500);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f000 fac9 	bl	8001854 <HAL_Delay>
	HAL_GPIO_WritePin(UserLED2_GPIO_Port, UserLED2_Pin, GPIO_PIN_RESET);
 80012c2:	e7ec      	b.n	800129e <main+0x22>
 80012c4:	20000078 	.word	0x20000078
 80012c8:	40011000 	.word	0x40011000
 80012cc:	40010800 	.word	0x40010800

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012da:	2228      	movs	r2, #40	; 0x28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 f9f4 	bl	80036cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130e:	2301      	movs	r3, #1
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001320:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	4618      	mov	r0, r3
 8001328:	f001 f964 	bl	80025f4 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001332:	f000 f90b 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133a:	2302      	movs	r3, #2
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001346:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2102      	movs	r1, #2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fbd0 	bl	8002af8 <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800135e:	f000 f8f5 	bl	800154c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001362:	2302      	movs	r3, #2
 8001364:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fd46 	bl	8002e00 <HAL_RCCEx_PeriphCLKConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800137a:	f000 f8e7 	bl	800154c <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	; 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_ADC1_Init+0x74>)
 800139a:	4a19      	ldr	r2, [pc, #100]	; (8001400 <MX_ADC1_Init+0x78>)
 800139c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_ADC1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_ADC1_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_ADC1_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_ADC1_Init+0x74>)
 80013b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <MX_ADC1_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_ADC1_Init+0x74>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_ADC1_Init+0x74>)
 80013c6:	f000 fa69 	bl	800189c <HAL_ADC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f000 f8bc 	bl	800154c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d8:	2301      	movs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_ADC1_Init+0x74>)
 80013e6:	f000 fcf1 	bl	8001dcc <HAL_ADC_ConfigChannel>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013f0:	f000 f8ac 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000048 	.word	0x20000048
 8001400:	40012400 	.word	0x40012400

08001404 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_SPI1_Init+0x64>)
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <MX_SPI1_Init+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_SPI1_Init+0x64>)
 8001410:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001414:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_SPI1_Init+0x64>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_SPI1_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_SPI1_Init+0x64>)
 8001430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001434:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_SPI1_Init+0x64>)
 8001438:	2208      	movs	r2, #8
 800143a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_SPI1_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_SPI1_Init+0x64>)
 8001444:	2200      	movs	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_SPI1_Init+0x64>)
 800144a:	2200      	movs	r2, #0
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_SPI1_Init+0x64>)
 8001450:	220a      	movs	r2, #10
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_SPI1_Init+0x64>)
 8001456:	f001 fe49 	bl	80030ec <HAL_SPI_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001460:	f000 f874 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000078 	.word	0x20000078
 800146c:	40013000 	.word	0x40013000

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <MX_GPIO_Init+0xd0>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <MX_GPIO_Init+0xd0>)
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <MX_GPIO_Init+0xd0>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MX_GPIO_Init+0xd0>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014a2:	f043 0320 	orr.w	r3, r3, #32
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0320 	and.w	r3, r3, #32
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a21      	ldr	r2, [pc, #132]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014d2:	f043 0308 	orr.w	r3, r3, #8
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <MX_GPIO_Init+0xd0>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserLED2_GPIO_Port, UserLED2_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ea:	4816      	ldr	r0, [pc, #88]	; (8001544 <MX_GPIO_Init+0xd4>)
 80014ec:	f001 f86a 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserLED_GPIO_Port, UserLED_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f6:	4814      	ldr	r0, [pc, #80]	; (8001548 <MX_GPIO_Init+0xd8>)
 80014f8:	f001 f864 	bl	80025c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UserLED2_Pin */
  GPIO_InitStruct.Pin = UserLED2_Pin;
 80014fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2302      	movs	r3, #2
 800150c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserLED2_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	4619      	mov	r1, r3
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <MX_GPIO_Init+0xd4>)
 8001516:	f000 fed1 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UserLED_Pin */
  GPIO_InitStruct.Pin = UserLED_Pin;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2302      	movs	r3, #2
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserLED_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_GPIO_Init+0xd8>)
 8001534:	f000 fec2 	bl	80022bc <HAL_GPIO_Init>

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	40011000 	.word	0x40011000
 8001548:	40010800 	.word	0x40010800

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>
	...

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_MspInit+0x5c>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_MspInit+0x5c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6193      	str	r3, [r2, #24]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_MspInit+0x5c>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x5c>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_MspInit+0x5c>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_MspInit+0x5c>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_MspInit+0x60>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_MspInit+0x60>)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000

080015bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a14      	ldr	r2, [pc, #80]	; (8001628 <HAL_ADC_MspInit+0x6c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d121      	bne.n	8001620 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_ADC_MspInit+0x70>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a12      	ldr	r2, [pc, #72]	; (800162c <HAL_ADC_MspInit+0x70>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_ADC_MspInit+0x70>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_ADC_MspInit+0x70>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a0c      	ldr	r2, [pc, #48]	; (800162c <HAL_ADC_MspInit+0x70>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_ADC_MspInit+0x70>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800160c:	237e      	movs	r3, #126	; 0x7e
 800160e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001610:	2303      	movs	r3, #3
 8001612:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	4619      	mov	r1, r3
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_ADC_MspInit+0x74>)
 800161c:	f000 fe4e 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40012400 	.word	0x40012400
 800162c:	40021000 	.word	0x40021000
 8001630:	40010800 	.word	0x40010800

08001634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a22      	ldr	r2, [pc, #136]	; (80016d8 <HAL_SPI_MspInit+0xa4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d13d      	bne.n	80016d0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_SPI_MspInit+0xa8>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <HAL_SPI_MspInit+0xa8>)
 800165a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800165e:	6193      	str	r3, [r2, #24]
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_SPI_MspInit+0xa8>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_SPI_MspInit+0xa8>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_SPI_MspInit+0xa8>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_SPI_MspInit+0xa8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001684:	2328      	movs	r3, #40	; 0x28
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4812      	ldr	r0, [pc, #72]	; (80016e0 <HAL_SPI_MspInit+0xac>)
 8001698:	f000 fe10 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800169c:	2310      	movs	r3, #16
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	480c      	ldr	r0, [pc, #48]	; (80016e0 <HAL_SPI_MspInit+0xac>)
 80016b0:	f000 fe04 	bl	80022bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_SPI_MspInit+0xb0>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_SPI_MspInit+0xb0>)
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40013000 	.word	0x40013000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010c00 	.word	0x40010c00
 80016e4:	40010000 	.word	0x40010000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800172e:	f000 f875 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}

08001736 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	; (8001788 <LoopFillZerobss+0x22>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176a:	f7ff ffe4 	bl	8001736 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f001 ff89 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001772:	f7ff fd83 	bl	800127c <main>
  bx lr
 8001776:	4770      	bx	lr
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001780:	08003744 	.word	0x08003744
  ldr r2, =_sbss
 8001784:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001788:	20000118 	.word	0x20000118

0800178c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC1_2_IRQHandler>
	...

08001790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x28>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 fd57 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff fed4 	bl	8001558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40022000 	.word	0x40022000

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fd61 	bl	80022a2 <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 fd37 	bl	800226a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000001c 	.word	0x2000001c
 8001814:	20000024 	.word	0x20000024
 8001818:	20000020 	.word	0x20000020

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x1c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x20>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_IncTick+0x20>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000024 	.word	0x20000024
 800183c:	20000114 	.word	0x20000114

08001840 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_GetTick+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000114 	.word	0x20000114

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fff0 	bl	8001840 <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffe0 	bl	8001840 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000024 	.word	0x20000024

0800189c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e0be      	b.n	8001a3c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fe6e 	bl	80015bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fbc5 	bl	8002070 <ADC_ConversionStop_Disable>
 80018e6:	4603      	mov	r3, r0
 80018e8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8099 	bne.w	8001a2a <HAL_ADC_Init+0x18e>
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 8095 	bne.w	8001a2a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800191c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7b1b      	ldrb	r3, [r3, #12]
 8001922:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001924:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4313      	orrs	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001934:	d003      	beq.n	800193e <HAL_ADC_Init+0xa2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <HAL_ADC_Init+0xa8>
 800193e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001942:	e000      	b.n	8001946 <HAL_ADC_Init+0xaa>
 8001944:	2300      	movs	r3, #0
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7d1b      	ldrb	r3, [r3, #20]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d119      	bne.n	8001988 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7b1b      	ldrb	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d109      	bne.n	8001970 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	3b01      	subs	r3, #1
 8001962:	035a      	lsls	r2, r3, #13
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e00b      	b.n	8001988 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_ADC_Init+0x1a8>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b8:	d003      	beq.n	80019c2 <HAL_ADC_Init+0x126>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d104      	bne.n	80019cc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	051b      	lsls	r3, r3, #20
 80019ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	430a      	orrs	r2, r1
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_ADC_Init+0x1ac>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d10b      	bne.n	8001a08 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a06:	e018      	b.n	8001a3a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f023 0312 	bic.w	r3, r3, #18
 8001a10:	f043 0210 	orr.w	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a28:	e007      	b.n	8001a3a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	f043 0210 	orr.w	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	ffe1f7fd 	.word	0xffe1f7fd
 8001a48:	ff1f0efe 	.word	0xff1f0efe

08001a4c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Start+0x1a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e098      	b.n	8001b98 <HAL_ADC_Start+0x14c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 faa4 	bl	8001fbc <ADC_Enable>
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 8087 	bne.w	8001b8e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a41      	ldr	r2, [pc, #260]	; (8001ba0 <HAL_ADC_Start+0x154>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d105      	bne.n	8001aaa <HAL_ADC_Start+0x5e>
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_ADC_Start+0x158>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d115      	bne.n	8001ad6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d026      	beq.n	8001b12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001acc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad4:	e01d      	b.n	8001b12 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2f      	ldr	r2, [pc, #188]	; (8001ba4 <HAL_ADC_Start+0x158>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_ADC_Start+0xaa>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2b      	ldr	r2, [pc, #172]	; (8001ba0 <HAL_ADC_Start+0x154>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10d      	bne.n	8001b12 <HAL_ADC_Start+0xc6>
 8001af6:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_ADC_Start+0x158>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b0a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d006      	beq.n	8001b2c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	f023 0206 	bic.w	r2, r3, #6
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2a:	e002      	b.n	8001b32 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f06f 0202 	mvn.w	r2, #2
 8001b42:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b52:	d113      	bne.n	8001b7c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b58:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_ADC_Start+0x154>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d105      	bne.n	8001b6a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_ADC_Start+0x158>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d108      	bne.n	8001b7c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	e00c      	b.n	8001b96 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e003      	b.n	8001b96 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012800 	.word	0x40012800
 8001ba4:	40012400 	.word	0x40012400

08001ba8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bbe:	f7ff fe3f 	bl	8001840 <HAL_GetTick>
 8001bc2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	f043 0220 	orr.w	r2, r3, #32
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0d3      	b.n	8001d92 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d131      	bne.n	8001c5c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d12a      	bne.n	8001c5c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c06:	e021      	b.n	8001c4c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0e:	d01d      	beq.n	8001c4c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d007      	beq.n	8001c26 <HAL_ADC_PollForConversion+0x7e>
 8001c16:	f7ff fe13 	bl	8001840 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d212      	bcs.n	8001c4c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10b      	bne.n	8001c4c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f043 0204 	orr.w	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0a2      	b.n	8001d92 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0d6      	beq.n	8001c08 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c5a:	e070      	b.n	8001d3e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_ADC_PollForConversion+0x1f4>)
 8001c5e:	681c      	ldr	r4, [r3, #0]
 8001c60:	2002      	movs	r0, #2
 8001c62:	f001 f983 	bl	8002f6c <HAL_RCCEx_GetPeriphCLKFreq>
 8001c66:	4603      	mov	r3, r0
 8001c68:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6919      	ldr	r1, [r3, #16]
 8001c72:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_ADC_PollForConversion+0x1f8>)
 8001c74:	400b      	ands	r3, r1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_ADC_PollForConversion+0x104>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68d9      	ldr	r1, [r3, #12]
 8001c80:	4b48      	ldr	r3, [pc, #288]	; (8001da4 <HAL_ADC_PollForConversion+0x1fc>)
 8001c82:	400b      	ands	r3, r1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d111      	bne.n	8001cac <HAL_ADC_PollForConversion+0x104>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6919      	ldr	r1, [r3, #16]
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_ADC_PollForConversion+0x200>)
 8001c90:	400b      	ands	r3, r1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d108      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x100>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	4b43      	ldr	r3, [pc, #268]	; (8001dac <HAL_ADC_PollForConversion+0x204>)
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_PollForConversion+0x100>
 8001ca4:	2314      	movs	r3, #20
 8001ca6:	e020      	b.n	8001cea <HAL_ADC_PollForConversion+0x142>
 8001ca8:	2329      	movs	r3, #41	; 0x29
 8001caa:	e01e      	b.n	8001cea <HAL_ADC_PollForConversion+0x142>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6919      	ldr	r1, [r3, #16]
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_ADC_PollForConversion+0x200>)
 8001cb4:	400b      	ands	r3, r1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_ADC_PollForConversion+0x120>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68d9      	ldr	r1, [r3, #12]
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_ADC_PollForConversion+0x204>)
 8001cc2:	400b      	ands	r3, r1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x13c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6919      	ldr	r1, [r3, #16]
 8001cce:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_ADC_PollForConversion+0x208>)
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d108      	bne.n	8001ce8 <HAL_ADC_PollForConversion+0x140>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68d9      	ldr	r1, [r3, #12]
 8001cdc:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_ADC_PollForConversion+0x208>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_PollForConversion+0x140>
 8001ce4:	2354      	movs	r3, #84	; 0x54
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_PollForConversion+0x142>
 8001ce8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cf0:	e021      	b.n	8001d36 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d01a      	beq.n	8001d30 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_ADC_PollForConversion+0x168>
 8001d00:	f7ff fd9e 	bl	8001840 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d20f      	bcs.n	8001d30 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d90b      	bls.n	8001d30 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	f043 0204 	orr.w	r2, r3, #4
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e030      	b.n	8001d92 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d8d9      	bhi.n	8001cf2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0212 	mvn.w	r2, #18
 8001d46:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d5e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d62:	d115      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d111      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd90      	pop	{r4, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000001c 	.word	0x2000001c
 8001da0:	24924924 	.word	0x24924924
 8001da4:	00924924 	.word	0x00924924
 8001da8:	12492492 	.word	0x12492492
 8001dac:	00492492 	.word	0x00492492
 8001db0:	00249249 	.word	0x00249249

08001db4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x20>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0dc      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x1da>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d81c      	bhi.n	8001e36 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b05      	subs	r3, #5
 8001e0e:	221f      	movs	r2, #31
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4019      	ands	r1, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3b05      	subs	r3, #5
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	635a      	str	r2, [r3, #52]	; 0x34
 8001e34:	e03c      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d81c      	bhi.n	8001e78 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	3b23      	subs	r3, #35	; 0x23
 8001e50:	221f      	movs	r2, #31
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	4019      	ands	r1, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	3b23      	subs	r3, #35	; 0x23
 8001e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
 8001e76:	e01b      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	3b41      	subs	r3, #65	; 0x41
 8001e8a:	221f      	movs	r2, #31
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b41      	subs	r3, #65	; 0x41
 8001ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b09      	cmp	r3, #9
 8001eb6:	d91c      	bls.n	8001ef2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68d9      	ldr	r1, [r3, #12]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b1e      	subs	r3, #30
 8001eca:	2207      	movs	r2, #7
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4019      	ands	r1, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6898      	ldr	r0, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b1e      	subs	r3, #30
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	e019      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6919      	ldr	r1, [r3, #16]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	2207      	movs	r2, #7
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4019      	ands	r1, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6898      	ldr	r0, [r3, #8]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	d003      	beq.n	8001f36 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f32:	2b11      	cmp	r3, #17
 8001f34:	d132      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d125      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d126      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f5c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	d11a      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	0c9a      	lsrs	r2, r3, #18
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f7c:	e002      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f9      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x1b2>
 8001f8a:	e007      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f90:	f043 0220 	orr.w	r2, r3, #32
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	40012400 	.word	0x40012400
 8001fb4:	2000001c 	.word	0x2000001c
 8001fb8:	431bde83 	.word	0x431bde83

08001fbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d040      	beq.n	800205c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fea:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <ADC_Enable+0xac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <ADC_Enable+0xb0>)
 8001ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ff8:	e002      	b.n	8002000 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002006:	f7ff fc1b 	bl	8001840 <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800200c:	e01f      	b.n	800204e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800200e:	f7ff fc17 	bl	8001840 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d918      	bls.n	800204e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d011      	beq.n	800204e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	f043 0201 	orr.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e007      	b.n	800205e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d1d8      	bne.n	800200e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000001c 	.word	0x2000001c
 800206c:	431bde83 	.word	0x431bde83

08002070 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d12e      	bne.n	80020e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0201 	bic.w	r2, r2, #1
 8002098:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800209a:	f7ff fbd1 	bl	8001840 <HAL_GetTick>
 800209e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020a0:	e01b      	b.n	80020da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020a2:	f7ff fbcd 	bl	8001840 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d914      	bls.n	80020da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d10d      	bne.n	80020da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	f043 0210 	orr.w	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e007      	b.n	80020ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d0dc      	beq.n	80020a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b089      	sub	sp, #36	; 0x24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f1c3 0307 	rsb	r3, r3, #7
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	bf28      	it	cs
 80021ca:	2304      	movcs	r3, #4
 80021cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d902      	bls.n	80021dc <NVIC_EncodePriority+0x30>
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3b03      	subs	r3, #3
 80021da:	e000      	b.n	80021de <NVIC_EncodePriority+0x32>
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	401a      	ands	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f4:	f04f 31ff 	mov.w	r1, #4294967295
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43d9      	mvns	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	4313      	orrs	r3, r2
         );
}
 8002206:	4618      	mov	r0, r3
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f7ff ff90 	bl	8002158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff49 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff5e 	bl	800213c <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff90 	bl	80021ac <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5f 	bl	8002158 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ffb0 	bl	8002210 <SysTick_Config>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b08b      	sub	sp, #44	; 0x2c
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	e169      	b.n	80025a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d0:	2201      	movs	r2, #1
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8158 	bne.w	800259e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	4a9a      	ldr	r2, [pc, #616]	; (800255c <HAL_GPIO_Init+0x2a0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d05e      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 80022f8:	4a98      	ldr	r2, [pc, #608]	; (800255c <HAL_GPIO_Init+0x2a0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d875      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 80022fe:	4a98      	ldr	r2, [pc, #608]	; (8002560 <HAL_GPIO_Init+0x2a4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d058      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002304:	4a96      	ldr	r2, [pc, #600]	; (8002560 <HAL_GPIO_Init+0x2a4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d86f      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 800230a:	4a96      	ldr	r2, [pc, #600]	; (8002564 <HAL_GPIO_Init+0x2a8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d052      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002310:	4a94      	ldr	r2, [pc, #592]	; (8002564 <HAL_GPIO_Init+0x2a8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d869      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002316:	4a94      	ldr	r2, [pc, #592]	; (8002568 <HAL_GPIO_Init+0x2ac>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d04c      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 800231c:	4a92      	ldr	r2, [pc, #584]	; (8002568 <HAL_GPIO_Init+0x2ac>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d863      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002322:	4a92      	ldr	r2, [pc, #584]	; (800256c <HAL_GPIO_Init+0x2b0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d046      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
 8002328:	4a90      	ldr	r2, [pc, #576]	; (800256c <HAL_GPIO_Init+0x2b0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d85d      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 800232e:	2b12      	cmp	r3, #18
 8002330:	d82a      	bhi.n	8002388 <HAL_GPIO_Init+0xcc>
 8002332:	2b12      	cmp	r3, #18
 8002334:	d859      	bhi.n	80023ea <HAL_GPIO_Init+0x12e>
 8002336:	a201      	add	r2, pc, #4	; (adr r2, 800233c <HAL_GPIO_Init+0x80>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	080023b7 	.word	0x080023b7
 8002340:	08002391 	.word	0x08002391
 8002344:	080023a3 	.word	0x080023a3
 8002348:	080023e5 	.word	0x080023e5
 800234c:	080023eb 	.word	0x080023eb
 8002350:	080023eb 	.word	0x080023eb
 8002354:	080023eb 	.word	0x080023eb
 8002358:	080023eb 	.word	0x080023eb
 800235c:	080023eb 	.word	0x080023eb
 8002360:	080023eb 	.word	0x080023eb
 8002364:	080023eb 	.word	0x080023eb
 8002368:	080023eb 	.word	0x080023eb
 800236c:	080023eb 	.word	0x080023eb
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023eb 	.word	0x080023eb
 8002378:	080023eb 	.word	0x080023eb
 800237c:	080023eb 	.word	0x080023eb
 8002380:	08002399 	.word	0x08002399
 8002384:	080023ad 	.word	0x080023ad
 8002388:	4a79      	ldr	r2, [pc, #484]	; (8002570 <HAL_GPIO_Init+0x2b4>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800238e:	e02c      	b.n	80023ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	623b      	str	r3, [r7, #32]
          break;
 8002396:	e029      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	3304      	adds	r3, #4
 800239e:	623b      	str	r3, [r7, #32]
          break;
 80023a0:	e024      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	3308      	adds	r3, #8
 80023a8:	623b      	str	r3, [r7, #32]
          break;
 80023aa:	e01f      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	330c      	adds	r3, #12
 80023b2:	623b      	str	r3, [r7, #32]
          break;
 80023b4:	e01a      	b.n	80023ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023be:	2304      	movs	r3, #4
 80023c0:	623b      	str	r3, [r7, #32]
          break;
 80023c2:	e013      	b.n	80023ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d105      	bne.n	80023d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023cc:	2308      	movs	r3, #8
 80023ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	611a      	str	r2, [r3, #16]
          break;
 80023d6:	e009      	b.n	80023ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d8:	2308      	movs	r3, #8
 80023da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	615a      	str	r2, [r3, #20]
          break;
 80023e2:	e003      	b.n	80023ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e000      	b.n	80023ec <HAL_GPIO_Init+0x130>
          break;
 80023ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2bff      	cmp	r3, #255	; 0xff
 80023f0:	d801      	bhi.n	80023f6 <HAL_GPIO_Init+0x13a>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_Init+0x13e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2bff      	cmp	r3, #255	; 0xff
 8002400:	d802      	bhi.n	8002408 <HAL_GPIO_Init+0x14c>
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	e002      	b.n	800240e <HAL_GPIO_Init+0x152>
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	3b08      	subs	r3, #8
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	210f      	movs	r1, #15
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	6a39      	ldr	r1, [r7, #32]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	fa01 f303 	lsl.w	r3, r1, r3
 8002428:	431a      	orrs	r2, r3
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 80b1 	beq.w	800259e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <HAL_GPIO_Init+0x2b8>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a4c      	ldr	r2, [pc, #304]	; (8002574 <HAL_GPIO_Init+0x2b8>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b4a      	ldr	r3, [pc, #296]	; (8002574 <HAL_GPIO_Init+0x2b8>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002454:	4a48      	ldr	r2, [pc, #288]	; (8002578 <HAL_GPIO_Init+0x2bc>)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a40      	ldr	r2, [pc, #256]	; (800257c <HAL_GPIO_Init+0x2c0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_GPIO_Init+0x1ec>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a3f      	ldr	r2, [pc, #252]	; (8002580 <HAL_GPIO_Init+0x2c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00d      	beq.n	80024a4 <HAL_GPIO_Init+0x1e8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3e      	ldr	r2, [pc, #248]	; (8002584 <HAL_GPIO_Init+0x2c8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <HAL_GPIO_Init+0x1e4>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3d      	ldr	r2, [pc, #244]	; (8002588 <HAL_GPIO_Init+0x2cc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_GPIO_Init+0x1e0>
 8002498:	2303      	movs	r3, #3
 800249a:	e006      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 800249c:	2304      	movs	r3, #4
 800249e:	e004      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_GPIO_Init+0x1ee>
 80024a8:	2300      	movs	r3, #0
 80024aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ba:	492f      	ldr	r1, [pc, #188]	; (8002578 <HAL_GPIO_Init+0x2bc>)
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d006      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	492c      	ldr	r1, [pc, #176]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	4928      	ldr	r1, [pc, #160]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024fc:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_GPIO_Init+0x2d0>)
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	4922      	ldr	r1, [pc, #136]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	43db      	mvns	r3, r3
 8002512:	491e      	ldr	r1, [pc, #120]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002514:	4013      	ands	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	4918      	ldr	r1, [pc, #96]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	43db      	mvns	r3, r3
 800253a:	4914      	ldr	r1, [pc, #80]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800253c:	4013      	ands	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d021      	beq.n	8002590 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_GPIO_Init+0x2d0>)
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	490e      	ldr	r1, [pc, #56]	; (800258c <HAL_GPIO_Init+0x2d0>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	60cb      	str	r3, [r1, #12]
 8002558:	e021      	b.n	800259e <HAL_GPIO_Init+0x2e2>
 800255a:	bf00      	nop
 800255c:	10320000 	.word	0x10320000
 8002560:	10310000 	.word	0x10310000
 8002564:	10220000 	.word	0x10220000
 8002568:	10210000 	.word	0x10210000
 800256c:	10120000 	.word	0x10120000
 8002570:	10110000 	.word	0x10110000
 8002574:	40021000 	.word	0x40021000
 8002578:	40010000 	.word	0x40010000
 800257c:	40010800 	.word	0x40010800
 8002580:	40010c00 	.word	0x40010c00
 8002584:	40011000 	.word	0x40011000
 8002588:	40011400 	.word	0x40011400
 800258c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_GPIO_Init+0x304>)
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	43db      	mvns	r3, r3
 8002598:	4909      	ldr	r1, [pc, #36]	; (80025c0 <HAL_GPIO_Init+0x304>)
 800259a:	4013      	ands	r3, r2
 800259c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	fa22 f303 	lsr.w	r3, r2, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f47f ae8e 	bne.w	80022d0 <HAL_GPIO_Init+0x14>
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	372c      	adds	r7, #44	; 0x2c
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	807b      	strh	r3, [r7, #2]
 80025d0:	4613      	mov	r3, r2
 80025d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d4:	787b      	ldrb	r3, [r7, #1]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025da:	887a      	ldrh	r2, [r7, #2]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e0:	e003      	b.n	80025ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e2:	887b      	ldrh	r3, [r7, #2]
 80025e4:	041a      	lsls	r2, r3, #16
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e272      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8087 	beq.w	8002722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002614:	4b92      	ldr	r3, [pc, #584]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00c      	beq.n	800263a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002620:	4b8f      	ldr	r3, [pc, #572]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d112      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
 800262c:	4b8c      	ldr	r3, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d06c      	beq.n	8002720 <HAL_RCC_OscConfig+0x12c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d168      	bne.n	8002720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e24c      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x76>
 800265c:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a7f      	ldr	r2, [pc, #508]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	e02e      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b78      	ldr	r3, [pc, #480]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a77      	ldr	r2, [pc, #476]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0xbc>
 8002696:	4b72      	ldr	r3, [pc, #456]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a71      	ldr	r2, [pc, #452]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6e      	ldr	r2, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xd4>
 80026b0:	4b6b      	ldr	r3, [pc, #428]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a67      	ldr	r2, [pc, #412]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7ff f8b6 	bl	8001840 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff f8b2 	bl	8001840 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e200      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe4>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f8a2 	bl	8001840 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f89e 	bl	8001840 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1ec      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b53      	ldr	r3, [pc, #332]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x10c>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800273a:	4b49      	ldr	r3, [pc, #292]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
 8002746:	4b46      	ldr	r3, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c0      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4939      	ldr	r1, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b36      	ldr	r3, [pc, #216]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7ff f857 	bl	8001840 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002796:	f7ff f853 	bl	8001840 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4927      	ldr	r1, [pc, #156]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b26      	ldr	r3, [pc, #152]	; (8002864 <HAL_RCC_OscConfig+0x270>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7ff f836 	bl	8001840 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027d8:	f7ff f832 	bl	8001840 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e180      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03a      	beq.n	8002878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d019      	beq.n	800283e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7ff f816 	bl	8001840 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff f812 	bl	8001840 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e160      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x26c>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002836:	2001      	movs	r0, #1
 8002838:	f000 fac4 	bl	8002dc4 <RCC_Delay>
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x274>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002844:	f7fe fffc 	bl	8001840 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284a:	e00f      	b.n	800286c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe fff8 	bl	8001840 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d908      	bls.n	800286c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e146      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	42420000 	.word	0x42420000
 8002868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b92      	ldr	r3, [pc, #584]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e9      	bne.n	800284c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a6 	beq.w	80029d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b2:	4b82      	ldr	r3, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d118      	bne.n	80028f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028be:	4b7f      	ldr	r3, [pc, #508]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a7e      	ldr	r2, [pc, #504]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ca:	f7fe ffb9 	bl	8001840 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d2:	f7fe ffb5 	bl	8001840 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b64      	cmp	r3, #100	; 0x64
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e103      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_RCC_OscConfig+0x4c8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x312>
 80028f8:	4b6f      	ldr	r3, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a6e      	ldr	r2, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e02d      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x334>
 800290e:	4b6a      	ldr	r3, [pc, #424]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a69      	ldr	r2, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a66      	ldr	r2, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	e01c      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b05      	cmp	r3, #5
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0x356>
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a60      	ldr	r2, [pc, #384]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	4b5e      	ldr	r3, [pc, #376]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6213      	str	r3, [r2, #32]
 8002948:	e00b      	b.n	8002962 <HAL_RCC_OscConfig+0x36e>
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a5a      	ldr	r2, [pc, #360]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6213      	str	r3, [r2, #32]
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800296a:	f7fe ff69 	bl	8001840 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe ff65 	bl	8001840 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002980:	4293      	cmp	r3, r2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e0b1      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ee      	beq.n	8002972 <HAL_RCC_OscConfig+0x37e>
 8002994:	e014      	b.n	80029c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7fe ff53 	bl	8001840 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe ff4f 	bl	8001840 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e09b      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b4:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1ee      	bne.n	800299e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d105      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c6:	4b3c      	ldr	r3, [pc, #240]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8087 	beq.w	8002aea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d061      	beq.n	8002aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d146      	bne.n	8002a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe ff23 	bl	8001840 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe ff1f 	bl	8001840 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e06d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a10:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1f0      	bne.n	80029fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d108      	bne.n	8002a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4921      	ldr	r1, [pc, #132]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a19      	ldr	r1, [r3, #32]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fef3 	bl	8001840 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe feef 	bl	8001840 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e03d      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x46a>
 8002a7c:	e035      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_RCC_OscConfig+0x4cc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fedc 	bl	8001840 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fed8 	bl	8001840 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e026      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x498>
 8002aaa:	e01e      	b.n	8002aea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e019      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_OscConfig+0x500>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d0      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d910      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	4965      	ldr	r1, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d040      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e073      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06b      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002be8:	f7fe fe2a 	bl	8001840 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe fe26 	bl	8001840 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e053      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d210      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 0207 	bic.w	r2, r3, #7
 8002c2e:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	490a      	ldr	r1, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c98:	5ccb      	ldrb	r3, [r1, r3]
 8002c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fd88 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40022000 	.word	0x40022000
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	08003724 	.word	0x08003724
 8002cc4:	2000001c 	.word	0x2000001c
 8002cc8:	20000020 	.word	0x20000020

08002ccc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b490      	push	{r4, r7}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cd2:	4b29      	ldr	r3, [pc, #164]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xac>)
 8002cd4:	1d3c      	adds	r4, r7, #4
 8002cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cdc:	f240 2301 	movw	r3, #513	; 0x201
 8002ce0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d002      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x40>
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_GetSysClockFreq+0x46>
 8002d0a:	e02b      	b.n	8002d64 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d0e:	623b      	str	r3, [r7, #32]
      break;
 8002d10:	e02b      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	0c9b      	lsrs	r3, r3, #18
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3328      	adds	r3, #40	; 0x28
 8002d1c:	443b      	add	r3, r7
 8002d1e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d22:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d012      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0c5b      	lsrs	r3, r3, #17
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	3328      	adds	r3, #40	; 0x28
 8002d3a:	443b      	add	r3, r7
 8002d3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d46:	fb03 f202 	mul.w	r2, r3, r2
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	e004      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d58:	fb02 f303 	mul.w	r3, r2, r3
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	623b      	str	r3, [r7, #32]
      break;
 8002d62:	e002      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d66:	623b      	str	r3, [r7, #32]
      break;
 8002d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc90      	pop	{r4, r7}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	080036f4 	.word	0x080036f4
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	007a1200 	.word	0x007a1200
 8002d84:	003d0900 	.word	0x003d0900

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b02      	ldr	r3, [pc, #8]	; (8002d98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	2000001c 	.word	0x2000001c

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da0:	f7ff fff2 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0adb      	lsrs	r3, r3, #11
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4903      	ldr	r1, [pc, #12]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08003734 	.word	0x08003734

08002dc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <RCC_Delay+0x34>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <RCC_Delay+0x38>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0a5b      	lsrs	r3, r3, #9
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002de0:	bf00      	nop
  }
  while (Delay --);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e5a      	subs	r2, r3, #1
 8002de6:	60fa      	str	r2, [r7, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f9      	bne.n	8002de0 <RCC_Delay+0x1c>
}
 8002dec:	bf00      	nop
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	2000001c 	.word	0x2000001c
 8002dfc:	10624dd3 	.word	0x10624dd3

08002e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d07d      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e20:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10d      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e36:	61d3      	str	r3, [r2, #28]
 8002e38:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b46      	ldr	r3, [pc, #280]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d118      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e54:	4b43      	ldr	r3, [pc, #268]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a42      	ldr	r2, [pc, #264]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e60:	f7fe fcee 	bl	8001840 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	e008      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e68:	f7fe fcea 	bl	8001840 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e06d      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e86:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d02e      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d027      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eae:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d014      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fe fcb9 	bl	8001840 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fcb5 	bl	8001840 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e036      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ee      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	4917      	ldr	r1, [pc, #92]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	490b      	ldr	r1, [pc, #44]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4904      	ldr	r1, [pc, #16]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40007000 	.word	0x40007000
 8002f68:	42420440 	.word	0x42420440

08002f6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b08d      	sub	sp, #52	; 0x34
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f74:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002f76:	f107 040c 	add.w	r4, r7, #12
 8002f7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f80:	f240 2301 	movw	r3, #513	; 0x201
 8002f84:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	2300      	movs	r3, #0
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	f200 808e 	bhi.w	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d049      	beq.n	8003042 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d079      	beq.n	80030a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fb4:	e086      	b.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fbc:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d07f      	beq.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	0c9b      	lsrs	r3, r3, #18
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	3330      	adds	r3, #48	; 0x30
 8002fd2:	443b      	add	r3, r7
 8002fd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fd8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d017      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0c5b      	lsrs	r3, r3, #17
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	3330      	adds	r3, #48	; 0x30
 8002ff0:	443b      	add	r3, r7
 8002ff2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003002:	4a37      	ldr	r2, [pc, #220]	; (80030e0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	fbb2 f2f3 	udiv	r2, r2, r3
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003012:	e004      	b.n	800301e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	4a33      	ldr	r2, [pc, #204]	; (80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302a:	d102      	bne.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003030:	e04a      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4a2c      	ldr	r2, [pc, #176]	; (80030e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003040:	e042      	b.n	80030c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003052:	d108      	bne.n	8003066 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
 8003064:	e01f      	b.n	80030a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003070:	d109      	bne.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800307e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
 8003084:	e00f      	b.n	80030a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003090:	d11c      	bne.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800309e:	f24f 4324 	movw	r3, #62500	; 0xf424
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030a4:	e012      	b.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80030a6:	e011      	b.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030a8:	f7ff fe78 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	0b9b      	lsrs	r3, r3, #14
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	3301      	adds	r3, #1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80030c2:	e004      	b.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030c4:	bf00      	nop
 80030c6:	e002      	b.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030c8:	bf00      	nop
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80030cc:	bf00      	nop
    }
  }
  return (frequency);
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3734      	adds	r7, #52	; 0x34
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}
 80030d8:	08003704 	.word	0x08003704
 80030dc:	40021000 	.word	0x40021000
 80030e0:	007a1200 	.word	0x007a1200
 80030e4:	003d0900 	.word	0x003d0900
 80030e8:	aaaaaaab 	.word	0xaaaaaaab

080030ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e076      	b.n	80031ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800310e:	d009      	beq.n	8003124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
 8003116:	e005      	b.n	8003124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe fa78 	bl	8001634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a8:	ea42 0103 	orr.w	r1, r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0c1a      	lsrs	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f002 0204 	and.w	r2, r2, #4
 80031ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69da      	ldr	r2, [r3, #28]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003202:	2301      	movs	r3, #1
 8003204:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_SPI_TransmitReceive+0x26>
 8003216:	2302      	movs	r3, #2
 8003218:	e18a      	b.n	8003530 <HAL_SPI_TransmitReceive+0x33c>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003222:	f7fe fb0d 	bl	8001840 <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800323c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003240:	2b01      	cmp	r3, #1
 8003242:	d00f      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x70>
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324a:	d107      	bne.n	800325c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_SPI_TransmitReceive+0x68>
 8003254:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003258:	2b04      	cmp	r3, #4
 800325a:	d003      	beq.n	8003264 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800325c:	2302      	movs	r3, #2
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003262:	e15b      	b.n	800351c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x82>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x82>
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800327c:	e14e      	b.n	800351c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b04      	cmp	r3, #4
 8003288:	d003      	beq.n	8003292 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2205      	movs	r2, #5
 800328e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	887a      	ldrh	r2, [r7, #2]
 80032a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	887a      	ldrh	r2, [r7, #2]
 80032ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d007      	beq.n	80032e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ee:	d178      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x10a>
 80032f8:	8b7b      	ldrh	r3, [r7, #26]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d166      	bne.n	80033cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	1c9a      	adds	r2, r3, #2
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003322:	e053      	b.n	80033cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d11b      	bne.n	800336a <HAL_SPI_TransmitReceive+0x176>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <HAL_SPI_TransmitReceive+0x176>
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d113      	bne.n	800336a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	881a      	ldrh	r2, [r3, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	1c9a      	adds	r2, r3, #2
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b01      	cmp	r3, #1
 8003376:	d119      	bne.n	80033ac <HAL_SPI_TransmitReceive+0x1b8>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d014      	beq.n	80033ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	b292      	uxth	r2, r2
 800338e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033a8:	2301      	movs	r3, #1
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033ac:	f7fe fa48 	bl	8001840 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d807      	bhi.n	80033cc <HAL_SPI_TransmitReceive+0x1d8>
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c2:	d003      	beq.n	80033cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033ca:	e0a7      	b.n	800351c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1a6      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x130>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1a1      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x130>
 80033e0:	e07c      	b.n	80034dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_SPI_TransmitReceive+0x1fc>
 80033ea:	8b7b      	ldrh	r3, [r7, #26]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d16b      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003416:	e057      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d11c      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x26c>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d017      	beq.n	8003460 <HAL_SPI_TransmitReceive+0x26c>
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d114      	bne.n	8003460 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	7812      	ldrb	r2, [r2, #0]
 8003442:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d119      	bne.n	80034a2 <HAL_SPI_TransmitReceive+0x2ae>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d014      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800349e:	2301      	movs	r3, #1
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034a2:	f7fe f9cd 	bl	8001840 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d803      	bhi.n	80034ba <HAL_SPI_TransmitReceive+0x2c6>
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d102      	bne.n	80034c0 <HAL_SPI_TransmitReceive+0x2cc>
 80034ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d103      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034c6:	e029      	b.n	800351c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1a2      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x224>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d19d      	bne.n	8003418 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f8b1 	bl	8003648 <SPI_EndRxTxTransaction>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d006      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034f8:	e010      	b.n	800351c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	e000      	b.n	800351c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800351a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800352c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003530:	4618      	mov	r0, r3
 8003532:	3730      	adds	r7, #48	; 0x30
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003548:	f7fe f97a 	bl	8001840 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	4413      	add	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003558:	f7fe f972 	bl	8001840 <HAL_GetTick>
 800355c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800355e:	4b39      	ldr	r3, [pc, #228]	; (8003644 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	015b      	lsls	r3, r3, #5
 8003564:	0d1b      	lsrs	r3, r3, #20
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800356e:	e054      	b.n	800361a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d050      	beq.n	800361a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003578:	f7fe f962 	bl	8001840 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	429a      	cmp	r2, r3
 8003586:	d902      	bls.n	800358e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d13d      	bne.n	800360a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800359c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a6:	d111      	bne.n	80035cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b0:	d004      	beq.n	80035bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ba:	d107      	bne.n	80035cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d4:	d10f      	bne.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e017      	b.n	800363a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3b01      	subs	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4013      	ands	r3, r2
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	bf0c      	ite	eq
 800362a:	2301      	moveq	r3, #1
 800362c:	2300      	movne	r3, #0
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	429a      	cmp	r2, r3
 8003636:	d19b      	bne.n	8003570 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000001c 	.word	0x2000001c

08003648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	2180      	movs	r1, #128	; 0x80
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff ff6a 	bl	8003538 <SPI_WaitFlagStateUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366e:	f043 0220 	orr.w	r2, r3, #32
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e000      	b.n	800367c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	2600      	movs	r6, #0
 8003688:	4d0c      	ldr	r5, [pc, #48]	; (80036bc <__libc_init_array+0x38>)
 800368a:	4c0d      	ldr	r4, [pc, #52]	; (80036c0 <__libc_init_array+0x3c>)
 800368c:	1b64      	subs	r4, r4, r5
 800368e:	10a4      	asrs	r4, r4, #2
 8003690:	42a6      	cmp	r6, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	f000 f822 	bl	80036dc <_init>
 8003698:	2600      	movs	r6, #0
 800369a:	4d0a      	ldr	r5, [pc, #40]	; (80036c4 <__libc_init_array+0x40>)
 800369c:	4c0a      	ldr	r4, [pc, #40]	; (80036c8 <__libc_init_array+0x44>)
 800369e:	1b64      	subs	r4, r4, r5
 80036a0:	10a4      	asrs	r4, r4, #2
 80036a2:	42a6      	cmp	r6, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ac:	4798      	blx	r3
 80036ae:	3601      	adds	r6, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b6:	4798      	blx	r3
 80036b8:	3601      	adds	r6, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	0800373c 	.word	0x0800373c
 80036c0:	0800373c 	.word	0x0800373c
 80036c4:	0800373c 	.word	0x0800373c
 80036c8:	08003740 	.word	0x08003740

080036cc <memset>:
 80036cc:	4603      	mov	r3, r0
 80036ce:	4402      	add	r2, r0
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d100      	bne.n	80036d6 <memset+0xa>
 80036d4:	4770      	bx	lr
 80036d6:	f803 1b01 	strb.w	r1, [r3], #1
 80036da:	e7f9      	b.n	80036d0 <memset+0x4>

080036dc <_init>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr

080036e8 <_fini>:
 80036e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ea:	bf00      	nop
 80036ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ee:	bc08      	pop	{r3}
 80036f0:	469e      	mov	lr, r3
 80036f2:	4770      	bx	lr
